#pragma config(Sensor, in1,    lightSensor,    sensorReflection)
#pragma config(Sensor, dgtl6,  RightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl8,  LeftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl10, sonarSensor,    sensorSONAR_cm)
#pragma config(Motor,  port2,           rightMotor,    tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port3,           leftMotor,     tmotorServoContinuousRotation, openLoop)


/*----------------------------------------------------------------------------------------------------*\
|*                                			- Drive without crashing -                                    *|
|*                                      ROBOTC on VEX 2.0 CORTEX                                      *|
|*                                                                                                    *|
|*  This program will make the robot never crash and if lights are off then the robot stops so when   *|
|*  Turn the lights on he will start driving again																										*|
|*                                                                                                    *|
|*                                        ROBOT CONFIGURATION                                         *|
|*    NOTES:                                                                                          *|
|*    1)  press u7 to stop the program																					                      *|                                                          *|
|*                                                                                                    *|               *|
\*----------------------------------------------------------------------------------------------------*/


//+++++++++++++++++++++++++++++++++++++++++++++| MAIN |+++++++++++++++++++++++++++++++++++++++++++++++
bool IsSensorSafe(){
		if (SensorValue(sonarSensor) > 35  || SensorValue(sonarSensor) == -1) {
				return true;
		} else {
				return false;
		}
}
int Darkness() {
		if (SensorValue(lightSensor) > 400) {
				return 1;
		} else {
				return 0;
		}
}
void drive_Forward(){
			if(SensorValue[RightEncoder] == -SensorValue[LeftEncoder]) {
				motor[rightMotor] = 60;
				motor[leftMotor]  = 60;
			}
			else if(SensorValue[RightEncoder] > -SensorValue[LeftEncoder]) {
				motor[rightMotor] = 40;
				motor[leftMotor]  = 60;
			}
			else {
				motor[rightMotor] = 60;
				motor[leftMotor]  = 40;
			}
}
void turnAround() {
		motor[rightMotor] = -54;
		motor[leftMotor] = -54;
		wait1Msec(400);
		motor[rightMotor] = -40;
		motor[leftMotor] = 40;
		wait1Msec(400);
		while (SensorValue(sonarSensor) < 100 || SensorValue(sonarSensor) == -1) {
				motor[rightMotor] = -60;
				motor[leftMotor] = 60;
		}
}




task main()
{
  while(true) {
		if (Darkness()) {
		  	while (Darkness()) {
			  		motor[rightMotor] = 0;
						motor[leftMotor]  = 0;
							wait10Msec(10);
			  	}
			}
  	 	if (IsSensorSafe()){
  	 		drive_Forward();
  		}
  		if (vexRT[Btn7U] == 1) {
  			break;
  	 	}else{
  			turnAround();
  		}
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
